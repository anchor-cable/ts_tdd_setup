
Life GameをToDoリストにする

誕生
死んでいるセルに隣接する生きたセルがちょうど3つあれば、次の世代が誕生する。
生存
生きているセルに隣接する生きたセルが2つか3つならば、次の世代でも生存する。
過疎
生きているセルに隣接する生きたセルが1つ以下ならば、過疎により死滅する。
過密
生きているセルに隣接する生きたセルが4つ以上ならば、過密により死滅する。

- [x]ライフゲームフォーマットに沿った標準入力を受け取って配列化する
- [x]セルを渡すと周りに生きているセルが幾つあるのか数え上げる
- []セルの状態と回りの生きているセルの数を渡すと次の世代で生きているか死んでいるかの判定を返す
- []次の世代の配列を作成する
- []リストをライフゲームフォーマットに沿った標準出力する


ライフゲームフォーマット
- 3*3
- [-]と[*]によってのみ構成
- 生存するセルを*、死んでいるセルを-で表現したもの
- 最終行には改行コードは含めない
- 例) *-*\n***\n---

input
*-*
***
---

list
[[*,-,*],[*,*,*],[-,-,-]]

output
*-*
*-*
-*- (inputの次の世代)

countAlive(x,y)

countAlive(1,1) の返り値は1になる

nextAlive(1,1) の返り値はtrue

world = [[*,-,*],[*,*,*],[-,-,-]]

cell1.isAlive() = true

*--
*-*
---